WEBVTT

1
00:00:04.230 --> 00:00:10.410
Knowing when your app has network connectivity can be very helpful and avoid complicated or unnecessary

2
00:00:10.410 --> 00:00:15.930
error handling when trying to perform network requests under or flown conditions.

3
00:00:15.930 --> 00:00:22.610
So in the short list and we'll see how to use the HDMI L5 navigator API to check network status.

4
00:00:22.800 --> 00:00:27.540
The primary API here being the navigator online property.

5
00:00:27.540 --> 00:00:31.550
But we also have some access to events which I'll demonstrate in a minute.

6
00:00:31.590 --> 00:00:34.660
Navigator of course being a global window object.

7
00:00:34.680 --> 00:00:42.760
As with any other HDMI 5 API so this is exclusive to the renderer process indexed on HDMI all.

8
00:00:42.810 --> 00:00:51.990
I'll start by creating a simple network Status Indicator using this h1 tag say app is with an underscore

9
00:00:51.990 --> 00:01:00.750
tag that we can select to set the status using an idea of status then working in line we can check the

10
00:01:00.750 --> 00:01:03.780
initial network status when loading the app.

11
00:01:03.780 --> 00:01:11.970
Start by selecting the status element assigning the Domino to status node document dot get element by

12
00:01:12.000 --> 00:01:22.280
a D status then we can set this elements text based on the navigators on line property status node dot

13
00:01:22.400 --> 00:01:32.330
inner text equals using a ternary operator navigate a dot on line which if true will set the status

14
00:01:32.330 --> 00:01:34.130
text to online.

15
00:01:34.130 --> 00:01:37.740
Else meaning navigator dot online return false.

16
00:01:37.790 --> 00:01:45.280
We'll set it to offline save this reload main window and their app is on line.

17
00:01:45.560 --> 00:01:51.050
Now to test network conditions we can normally use the network conditions tab in dev tools.

18
00:01:51.050 --> 00:01:57.140
This one here setting throttling to offline but this doesn't work for the navigators.

19
00:01:57.140 --> 00:01:58.610
Online property.

20
00:01:58.610 --> 00:02:06.950
Instead I'll turn off my Wi-Fi to actually go offline refresh the window again app is off line back

21
00:02:07.070 --> 00:02:10.820
on refresh again and we're back.

22
00:02:10.820 --> 00:02:17.300
So this is a simple solution for checking network status explicitly but we can also implement event

23
00:02:17.300 --> 00:02:24.860
listeners to notify us of network changes or create a function to set the status text worth concert

24
00:02:25.280 --> 00:02:25.750
set.

25
00:02:25.760 --> 00:02:31.730
Status equals a function with a single argument of status.

26
00:02:31.820 --> 00:02:39.410
There's just being a true or false value move that node selector into the function reusing the same

27
00:02:39.410 --> 00:02:44.430
ternary operator checking instead of navigated out online.

28
00:02:44.510 --> 00:02:52.910
The status argument passed to the function perform as before the check on load calling set status with

29
00:02:52.910 --> 00:02:56.620
the status value being navigator dot on line.

30
00:02:56.960 --> 00:03:03.410
Then to have any subsequent changes to the network status reported we can listen on the window object

31
00:03:03.800 --> 00:03:11.250
so window dot add event listener on line meaning the app went back online.

32
00:03:11.460 --> 00:03:13.440
Call set status.

33
00:03:13.440 --> 00:03:26.370
True duplicate this listener for the offline event calling set status false safe reload the window which

34
00:03:26.370 --> 00:03:32.310
does the initial check and confirms that we're on line and now with the event we can actually use the

35
00:03:32.310 --> 00:03:40.080
dev tools to emulate network conditions set throttling to offline the header updates accordingly and

36
00:03:40.080 --> 00:03:42.000
the same when going back online.

